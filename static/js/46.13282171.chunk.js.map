{"version":3,"file":"static/js/46.13282171.chunk.js","mappings":"qIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C,uJCjCMC,EAAU,mCAEHC,EAAiB,6BAAG,8FAChBC,MAAM,yDAAD,OAA0DF,EAA1D,YACTV,MAAK,SAAAa,GACN,OAAOA,EAASC,MACnB,IACAd,MAAK,SAAAe,GACF,OAAOA,EAAKC,OACf,IAPwB,mFAAH,qDAUjBC,EAAY,6BAAG,WAAMC,GAAN,iFACXN,MAAM,sCAAD,OAAuCM,EAAvC,oBAA0DR,EAA1D,oBACTV,MAAK,SAAAa,GACN,OAAOA,EAASC,MACvB,IAJuB,mFAAH,sDAOZK,EAAe,6BAAG,WAAMC,GAAN,iFACdR,MAAM,qDAAD,OAAsDF,EAAtD,iCAAsFU,EAAtF,gCACTpB,MAAK,SAAAa,GACN,OAAOA,EAASC,MACvB,IAJ0B,mFAAH,sDAOfO,EAAY,6BAAG,WAAOH,GAAP,iFACXN,MAAM,sCAAD,OAAuCM,EAAvC,4BAAkER,EAAlE,oBACbV,MAAK,SAAAa,GACF,OAAOA,EAASC,MACvB,IAJuB,mFAAH,sDAOZQ,EAAe,6BAAE,WAAOJ,GAAP,iFACbN,MAAM,sCAAD,OAAuCM,EAAvC,4BAAkER,EAAlE,2BACbV,MAAK,SAAAa,GACF,OAAOA,EAASC,MACvB,IAJyB,mFAAF,qD,mHC9Bb,SAASS,IACpB,IAAQL,GAAYM,EAAAA,EAAAA,MAAZN,QACR,GAAwBO,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KASA,OAPAC,EAAAA,EAAAA,YACI,YACAP,EAAAA,EAAAA,IAAaH,GACRlB,MAAK,SAAAe,GACFY,EAAQZ,EAAKW,KAChB,GACR,GAAE,CAACR,KAEA,eAAIW,UAAU,YAAd,SAEwB,IAAhBH,EAAKI,QACC,cAAGD,UAAU,oBAAb,iDACDH,EAAKK,KAAI,SAAAC,GAAK,OACX,gBAAIH,UAAU,YAAd,WACI,gBAAKA,UAAU,aAAaI,IAAG,6CAAwCD,EAAME,cAAgBC,IAAKH,EAAMI,cAAeC,MAAM,SAC7H,cAAGR,UAAU,YAAb,SAA0BG,EAAMI,iBAChC,eAAGP,UAAU,iBAAb,wBAA0CG,EAAMM,eAHrBN,EAAMO,GAD1B,KASlC,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/Movie-api.js","pages/cast/Cast.js"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","\nconst API_KEY = '01da1c68b81345f905c14aa4e6274718'; \n\nexport const getTrendingMovies = async() => {\n    return await fetch(`https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}&page=1`)\n            .then(response => {\n            return response.json();\n        })\n        .then(data => {\n            return data.results;\n        });\n}\n\nexport const getMovieById = async(movieId) => {\n    return await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n            .then(response => {\n            return response.json();\n    })\n}\n\nexport const getMovieByTitle = async(movieTitle) => {\n    return await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${movieTitle}&page=1&include_adult=false`)\n            .then(response => {\n            return response.json();\n    })\n}\n\nexport const getMovieCast = async (movieId) => {\n    return await fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            return response.json();\n    })\n}\n\nexport const getMovieReviews= async (movieId) => {\n    return await fetch(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n        .then(response => {\n            return response.json();\n    })\n}","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { getMovieCast } from \"api/Movie-api\";\n\nexport default function Cast() {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(\n        () => {\n        getMovieCast(movieId)\n            .then(data => {\n                setCast(data.cast);\n            });\n    }, [movieId])\n    return (\n        <ul className=\"cast-list\">\n            {\n                cast.length === 0\n                    ? <p className=\"reviews-errorText\">We don`t any information about cast</p>\n                    :cast.map(actor =>\n                        <li className=\"cast-item\" key={actor.id}>\n                            <img className=\"cast-image\" src={`https://image.tmdb.org/t/p/original${actor.profile_path}`} alt={actor.original_name} width=\"100\" />\n                            <p className=\"cast-name\">{actor.original_name}</p>\n                            <p className=\"cast-character\">Character: {actor.character}</p>\n                        </li>\n            )}\n        </ul>\n    )\n}"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","API_KEY","getTrendingMovies","fetch","response","json","data","results","getMovieById","movieId","getMovieByTitle","movieTitle","getMovieCast","getMovieReviews","Cast","useParams","useState","cast","setCast","useEffect","className","length","map","actor","src","profile_path","alt","original_name","width","character","id"],"sourceRoot":""}